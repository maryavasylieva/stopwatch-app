{"version":3,"sources":["utils/renderTime.js","components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["renderTime","time","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","hours","seconds","Container","styled","div","Wrapper","TimeWrapper","Timer","span","TimeLabel","p","ButtonContainer","Button","button","Counter","useState","setTime","isStart","setIsStart","prevent","setPrevent","subscription","setSubscription","setTimeDifference","everySecond$","interval","pipe","map","val","onClick","subscribe","unsubscribe","disabled","onDoubleClick","setTimeout","clearInterval","Title","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAaA,EAAa,SAACC,GACzB,IAAMC,EAAa,WAAID,EAAO,IAAKE,OAAO,GACpCC,EAAO,UAAMC,KAAKC,MAAML,EAAO,KAC/BM,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAML,EAAO,OAAQE,OAAO,GAQtD,MANmB,CACjBM,MAAM,GAAD,OAAKD,GACVJ,QAAQ,GAAD,OAAKG,GACZG,QAAQ,GAAD,OAAKR,K,OCuFVS,EAAYC,IAAOC,IAAV,mSAYTC,EAAUF,IAAOC,IAAV,gFAKPE,EAAcH,IAAOC,IAAV,ifAyBXG,EAAQJ,IAAOK,KAAV,0LAULC,EAAYN,IAAOO,EAAV,qLAQTC,EAAkBR,IAAOC,IAAV,wEAKfQ,EAAST,IAAOU,OAAV,udAuBGC,EAjLC,WACd,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4CP,mBAAS,GAArD,mBAAuBQ,GAAvB,WAEMC,EAAeC,YAAS,KAAMC,KAAKC,aAAI,SAACC,GAAD,OAASA,EAAM,MA+C5D,OACE,eAAC1B,EAAD,WACE,eAACG,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAQhB,EAAWC,GAAMQ,QACzB,cAACS,EAAD,uBAGF,eAACH,EAAD,WACE,cAACC,EAAD,UAAQhB,EAAWC,GAAMG,UACzB,cAACc,EAAD,yBAGF,eAACH,EAAD,WACE,cAACC,EAAD,UAAQhB,EAAWC,GAAMS,UACzB,cAACQ,EAAD,4BAGJ,eAACE,EAAD,WACE,cAACC,EAAD,CAAQiB,QAhEM,WAClB,IAAKR,EAAc,CACjB,IAAMS,EAAYN,EAAaM,WAAU,SAACF,GAAD,OAASZ,EAAQY,EAAMpC,MAEhE8B,EAAgBQ,GAChBZ,GAAW,KA2DT,mBACA,cAACN,EAAD,CAAQiB,QAxDK,WACbR,GACFA,EAAaU,cAGff,EAAQ,GACRM,EAAgB,IAChBJ,GAAW,IAiDsBc,UAAWf,EAAxC,kBAGA,cAACL,EAAD,CAAQqB,cAxCK,WACjB,GAAId,EAAS,CACXC,GAAW,GACX,IAAMK,EAAWS,YAAW,WAC1Bd,GAAW,GACXe,cAAcV,KACb,UAECJ,GACFA,EAAaU,cAGfR,EAAkB/B,GAClB8B,EAAgB,KA2BqBU,UAAWf,EAA9C,kBAGA,cAACL,EAAD,CAAQiB,QApDM,WACdR,GACFA,EAAaU,cAGf,IAAMD,EAAYL,YAAS,KAAMK,WAAU,SAACF,GAAD,OAASZ,EAAQY,MAC5DN,EAAgBQ,IA8CkBE,UAAWf,EAAzC,0BC3ER,IAAMf,EAAYC,IAAOC,IAAV,6DAKTgC,EAAQjC,IAAOkC,GAAV,4IAOIC,EArBf,WACE,OACE,eAAC,EAAD,WACE,cAACF,EAAD,wBACA,cAAC,EAAD,QCKSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c19c380.chunk.js","sourcesContent":["export const renderTime = (time) => {\n  const getSeconds = `0${time % 60}`.slice(-2);\n  const minutes = `${Math.floor(time / 60)}`;\n  const getMinutes = `0${minutes % 60}`.slice(-2);\n  const getHours = `0${Math.floor(time / 3600)}`.slice(-2);\n\n  const timeObject = {\n    hours: `${getHours}`,\n    minutes: `${getMinutes}`,\n    seconds: `${getSeconds}`,\n  };\n\n  return timeObject;\n};\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { renderTime } from \"../utils/renderTime\";\n\nconst Counter = () => {\n  const [time, setTime] = useState(0);\n  const [isStart, setIsStart] = useState(false);\n  const [prevent, setPrevent] = useState(false);\n  const [subscription, setSubscription] = useState(\"\");\n  const [timeDifference, setTimeDifference] = useState(0);\n\n  const everySecond$ = interval(1000).pipe(map((val) => val + 1));\n\n  const handleStart = () => {\n    if (!subscription) {\n      const subscribe = everySecond$.subscribe((val) => setTime(val + time));\n\n      setSubscription(subscribe);\n      setIsStart(true);\n    }\n  };\n\n  const handleStop = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    setTime(0);\n    setSubscription(\"\");\n    setIsStart(false);\n  };\n\n  const handleReset = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    const subscribe = interval(1000).subscribe((val) => setTime(val));\n    setSubscription(subscribe);\n  };\n\n  const handleWait = () => {\n    if (prevent) {\n      setPrevent(false);\n      const interval = setTimeout(() => {\n        setPrevent(true);\n        clearInterval(interval);\n      }, 300);\n    } else {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n\n      setTimeDifference(time);\n      setSubscription(\"\");\n    }\n  };\n\n  return (\n    <Container>\n      <Wrapper>\n        <TimeWrapper>\n          <Timer>{renderTime(time).hours}</Timer>\n          <TimeLabel>hours</TimeLabel>\n        </TimeWrapper>\n\n        <TimeWrapper>\n          <Timer>{renderTime(time).minutes}</Timer>\n          <TimeLabel>minutes</TimeLabel>\n        </TimeWrapper>\n\n        <TimeWrapper>\n          <Timer>{renderTime(time).seconds}</Timer>\n          <TimeLabel>seconds</TimeLabel>\n        </TimeWrapper>\n      </Wrapper>\n      <ButtonContainer>\n        <Button onClick={handleStart}>Start</Button>\n        <Button onClick={handleStop} disabled={!isStart}>\n          Stop\n        </Button>\n        <Button onDoubleClick={handleWait} disabled={!isStart}>\n          Wait\n        </Button>\n        <Button onClick={handleReset} disabled={!isStart}>\n          Reset\n        </Button>\n      </ButtonContainer>\n    </Container>\n  );\n};\n\n// TIMER STYLES\nconst Container = styled.div`\n  margin-top: 30px;\n  margin-bottom: 30px;\n  background-color: #080808;\n  border-radius: 5px;\n  padding: 34px 54px;\n  box-shadow: 1px 1px 5px rgba(255, 255, 255, 0.15),\n    0 15px 90px 30px rgba(0, 0, 0, 0.25);\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst TimeWrapper = styled.div`\n  text-align: center;\n  margin-right: 40px;\n  margin-left: 40px;\n  min-width: 90px;\n  position: relative;\n  &:not(:last-child):before,\n  &:not(:last-child):after {\n    content: \"\";\n    background-color: rgba(255, 255, 255, 0.3);\n    height: 5px;\n    width: 5px;\n    border-radius: 50%;\n    display: block;\n    position: absolute;\n    right: -42px;\n  }\n  &:not(:last-child):before {\n    top: 35%;\n  }\n  &:not(:last-child):after {\n    top: 50%;\n  }\n`;\n\nconst Timer = styled.span`\n  font-family: \"Titillium Web\", sans-serif;\n  font-size: 50px;\n  &:before {\n    color: #fff;\n    font-size: 4.2rem;\n    text-transform: uppercase;\n  }\n`;\n\nconst TimeLabel = styled.p`\n  color: rgba(255, 255, 255, 0.35);\n  text-transform: uppercase;\n  font-family: \"Titillium Web\", sans-serif;\n  font-size: 12px;\n  margin-top: 10px;\n`;\n\nconst ButtonContainer = styled.div`\n  text-align: center;\n  margin-top: 20px;\n`;\n\nconst Button = styled.button`\n  background-color: #eb776e;\n  font-family: \"Titillium Web\", sans-serif;\n  border: none;\n  color: white;\n  margin: 0 5px 0 0;\n  padding: 13px 34px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  border-radius: 5px;\n  cursor: pointer;\n  &:last-child {\n    margin: 0 0 0 0;\n  }\n  &:disabled {\n    cursor: not-allowed;\n    pointer-events: none;\n    background-color: #f18f88;\n  }\n`;\n\nexport default Counter;\n","import styled from \"styled-components\";\nimport Counter from \"./components/Counter\";\n\nfunction App() {\n  return (\n    <Container>\n      <Title>Stopwatch</Title>\n      <Counter />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  width: 100%;\n  color: white;\n`;\n\nconst Title = styled.h1`\n  font-family: \"Titillium Web\", sans-serif;\n  font-size: 40px;\n  letter-spacing: 4px;\n  text-align: center;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}