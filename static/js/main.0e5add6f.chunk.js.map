{"version":3,"sources":["components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["TimeContainer","styled","div","ButtonContainer","Button","button","Counter","useState","setIsStart","time","setTime","subscription","setSubscription","prevent","setPrevent","setTimeDifference","everySecond$","interval","pipe","map","val","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","renderTime","onClick","subscribe","unsubscribe","onDoubleClick","setTimeout","clearInterval","Title","h1","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAyEMA,EAAgBC,IAAOC,IAAV,mIAObC,EAAkBF,IAAOC,IAAV,wEAKfE,EAASH,IAAOI,OAAV,gUAiBGC,EAjGC,WACd,MAA8BC,oBAAS,GAAvC,mBAAgBC,GAAhB,WACA,EAAwBD,mBAAS,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA4CP,mBAAS,GAArD,mBAAuBQ,GAAvB,WAEMC,EAAeC,YAAS,KAAMC,KAAKC,aAAI,SAACC,GAAD,OAASA,EAAM,MAgD5D,OACE,qCACE,cAACpB,EAAD,UAXe,WACjB,IAAMqB,EAAa,WAAIZ,EAAO,IAAKa,OAAO,GACpCC,EAAO,UAAMC,KAAKC,MAAMhB,EAAO,KAC/BiB,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAMhB,EAAO,OAAQa,OAAO,GAEtD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,GAKtBO,KAChB,eAACzB,EAAD,WACE,cAACC,EAAD,CAAQyB,QAlDM,WAClB,IAAMC,EAAYd,EAAac,WAAU,SAACV,GAAD,OAASV,EAAQU,EAAMX,MAEhEG,EAAgBkB,GAChBtB,GAAW,IA8CP,mBACA,cAACJ,EAAD,CAAQyB,QA5CK,WACjBlB,EAAaoB,cACbrB,EAAQ,IA0CJ,kBACA,cAACN,EAAD,CAAQ4B,cA/BK,WACjB,GAAInB,EAAS,CACXC,GAAW,GACX,IAAMG,EAAWgB,YAAW,WAC1BnB,GAAW,GACXoB,cAAcjB,KACb,UAECN,GACFA,EAAaoB,cAGfhB,EAAkBN,IAmBhB,kBACA,cAACL,EAAD,CAAQyB,QAzCM,WACdlB,GACFA,EAAaoB,cAGf,IAAMD,EAAYb,YAAS,KAAMa,WAAU,SAACV,GAAD,OAASV,EAAQU,MAC5DR,EAAgBkB,IAmCZ,0BCrDR,IAAMK,EAAQlC,IAAOmC,GAAV,mDAIIC,EAff,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,8BACE,cAACH,EAAD,0BAEF,cAAC,EAAD,QCGSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e5add6f.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nconst Counter = () => {\n  const [isStart, setIsStart] = useState(false);\n  const [time, setTime] = useState(0);\n  const [subscription, setSubscription] = useState(\"\");\n  const [prevent, setPrevent] = useState(false);\n  const [timeDifference, setTimeDifference] = useState(0);\n\n  const everySecond$ = interval(1000).pipe(map((val) => val + 1));\n\n  const handleStart = () => {\n    const subscribe = everySecond$.subscribe((val) => setTime(val + time));\n\n    setSubscription(subscribe);\n    setIsStart(true);\n  };\n\n  const handleStop = () => {\n    subscription.unsubscribe();\n    setTime(0);\n  };\n\n  const handleReset = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    const subscribe = interval(1000).subscribe((val) => setTime(val));\n    setSubscription(subscribe);\n  };\n\n  const handleWait = () => {\n    if (prevent) {\n      setPrevent(false);\n      const interval = setTimeout(() => {\n        setPrevent(true);\n        clearInterval(interval);\n      }, 300);\n    } else {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n\n      setTimeDifference(time);\n    }\n  };\n\n  const renderTime = () => {\n    const getSeconds = `0${time % 60}`.slice(-2);\n    const minutes = `${Math.floor(time / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(time / 3600)}`.slice(-2);\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n\n  return (\n    <>\n      <TimeContainer>{renderTime()}</TimeContainer>\n      <ButtonContainer>\n        <Button onClick={handleStart}>Start</Button>\n        <Button onClick={handleStop}>Stop</Button>\n        <Button onDoubleClick={handleWait}>Wait</Button>\n        <Button onClick={handleReset}>Reset</Button>\n      </ButtonContainer>\n    </>\n  );\n};\n\nconst TimeContainer = styled.div`\n  font-family: \"Raleway\", sans-serif;\n  font-size: 30px;\n  font-weight: 700;\n  text-align: center;\n`;\n\nconst ButtonContainer = styled.div`\n  text-align: center;\n  margin-top: 40px;\n`;\n\nconst Button = styled.button`\n  background-color: #4caf50;\n  border: none;\n  color: white;\n  margin: 0 5px 0 0;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  border-radius: 5px;\n  cursor: pointer;\n  &:last-child {\n    margin: 0 0 0 0;\n  }\n`;\n\nexport default Counter;\n","import styled from \"styled-components\";\nimport Counter from \"./components/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Title>Stopwatch</Title>\n      </div>\n      <Counter />\n    </div>\n  );\n}\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}